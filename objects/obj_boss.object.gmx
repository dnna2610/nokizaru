<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_boss</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enum boss_state {
    wondering,
    waiting,
    acting,
    stunned,
    idle,
    none
};
enum boss_action {
    shooting,
    spawning,
    charging
};
knockback = false;
state= boss_state.wondering;
act = boss_action.shooting;
charge_lower = false;
charged = false;
dir = point_direction(0,0,-5,-5);
motion_add(dir,5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stunned
state = boss_state.wondering;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Waiting
state = boss_state.acting;
charge_lower = false;
charged = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Wondering
state = boss_state.waiting;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move
switch (state)
{
    case boss_state.wondering:
        alarm[0] = room_speed *3; // Flying time
        state = boss_state.idle;
        break;
    case boss_state.waiting: 
        speed = 0;
        alarm[1] = room_speed/2; // Change this to change wait time before action
        state = boss_state.none;
        break;
    case boss_state.acting:
        /// Acting
        switch(act) {
            case boss_action.shooting:
                if (instance_exists(obj_player)) {
                    instance_create(x,y,obj_webbullet);
                    var inst = instance_position(x,y, obj_webbullet);
                    with(inst) {
                        dir = point_direction(x,y, obj_player.x, obj_player.y);
                        motion_add(dir, 15);
                    }
                }
                act = boss_action.spawning;
                state = boss_state.wondering;
                break;
            case boss_action.spawning:
                if (instance_exists(obj_player)) {
                    instance_create(x+ sprite_width,y + sprite_height,obj_enemy_pace);
                    var inst = instance_position(x,y, obj_enemy_pace);
                    with(inst) {
                        dir = point_direction(x,y, obj_player.x, obj_player.y);
                        motion_add(dir, 7);
                    }
                }
                act = boss_action.charging;
                state = boss_state.wondering;
                break;
            case boss_action.charging:
                if (instance_exists(obj_player)) {
                    v_dist = abs(y - obj_player.y);
                    if (not charge_lower) {
                        dir = point_direction(0,0,0,5);
                        motion_add(dir, 5);
                        charge_lower = true;
                    } else if ((v_dist &lt; 100) &amp;&amp; (not charged)) {
                        speed = 0;
                        dir = point_direction(x,y,obj_player.x, obj_player.y);
                        motion_add(dir, 20);
                        charged = true;
                    }
                }
                if (place_meeting(x,y, obj_wall)) {
                    speed = 0;
                    act = boss_action.shooting;
                    state = boss_state.stunned;
                    instance_create(x,y, obj_shake_effect);
                    audio_play_sound(snd_collide_boss,0, false);
                }
                break;
        }
        break;
    case boss_state.stunned:
        alarm[3] = room_speed * 1.5;
        state = boss_state.none;
        break;
    case boss_state.idle:
        vertical_wall = place_meeting(x, y-100, obj_wall) || place_meeting(x, y+250, obj_wall);
        horizontal_wall = place_meeting(x+100, y, obj_wall) || place_meeting(x-100, y, obj_wall);
        var inst = instance_nearest(x, y, obj_wall);
        dir = point_direction(x,y,inst.x, inst.y);
        if (speed == 0) {
            motion_add(dir+180,5);
        } else if (vertical_wall &amp;&amp; horizontal_wall) {
            speed = 0;
        } else {
            if ((abs(direction-dir) &lt; 135) &amp;&amp; (vertical_wall || horizontal_wall)) {
                dir = sign(direction-dir);
                direction = direction + 4*dir;
                if (dir == 0) direction += 10;
            }
        }
        /*
        if ((distance_to_object(obj_wall) &lt; 50) || (speed == 0)) motion_add(dir,5);
        if (place_meeting(x,y+150, obj_wall)) {
            dir = point_direction(0,0, 0,-5);
            motion_add(dir, 5);
        }*/
        if (speed &gt; 6) speed =6;
        break;
    case boss_state.none:
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
